module 7


typename is required to tell the compiler that a dependent name in a template is a type.


module 8


EX 02 MUTANT STACK



	typedef typename Container::iterator iterator;
	typedef typename Container::const_iterator const_iterator;

	template< typename T, typename Container = std::deque<T> >
    class MutantStack : public std::stack<T, Container>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SPAN EX 01
    unsigned int shortest = std::numeric_limits<unsigned int>::max();

does the following:

    std::numeric_limits<unsigned int>::max():
        This part of the code retrieves the maximum possible value that an unsigned int type can hold.
        std::numeric_limits is a template class in the C++ Standard Library that provides information about the properties of fundamental data types.
        max() is a static member function of std::numeric_limits<T> that returns the maximum finite value representable by the type T. For unsigned int, this is typically 4294967295 on most systems (which is 2^32 - 1).

    unsigned int shortest:
        This declares a variable named shortest of type unsigned int.

    shortest = std::numeric_limits<unsigned int>::max();:
        This initializes the shortest variable to the maximum possible value of an unsigned int.

Why Do This?

Setting shortest to the maximum possible value of unsigned int is often done as an initialization step in algorithms that need to find the minimum value in a sequence of numbers.